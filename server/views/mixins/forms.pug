//mixin formFor(entity = null)
//    form&attributes(attributes)
//        block
//
mixin input(entity, propertyName, errors = {})
    - getInputName = (property) => `data[${property}]`
    - getInputId = (property) => `data_${property}`
    - getLabelForUser = (propertyName) => text(`views.users.${propertyName}`)
    - propertyErrors = _.get(errors, propertyName)
    - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
    - inputId = getInputId(propertyName)

    .mb-3(class=(errors[propertyName] && 'has-danger'))
        label.form-label(
            for= inputId
        )= getLabelForUser(propertyName)
        input(
            id= inputId
            name=getInputName(propertyName)
            class=classLine
            value=_.get(entity, propertyName, '')
        )&attributes(attributes)
        if !_.isEmpty(propertyErrors)
            .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
    input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
    form(action=action, method="post")
        input(name="_method" type="hidden" value=method)
        input(type='submit')&attributes(attributes)
