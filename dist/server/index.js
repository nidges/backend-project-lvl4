"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _dotenv = _interopRequireDefault(require("dotenv"));

var _fastify = _interopRequireDefault(require("fastify"));

var _fastifyStatic = _interopRequireDefault(require("fastify-static"));

var _fastifyErrorPage = _interopRequireDefault(require("fastify-error-page"));

var _fastifySensible = _interopRequireDefault(require("fastify-sensible"));

var _fastifyFormbody = _interopRequireDefault(require("fastify-formbody"));

var _qs = _interopRequireDefault(require("qs"));

var _fastifyReverseRoutes = require("fastify-reverse-routes");

var _fastifyMethodOverride = _interopRequireDefault(require("fastify-method-override"));

var _fastifyObjectionjs = _interopRequireDefault(require("fastify-objectionjs"));

var _fastifyPassport = _interopRequireDefault(require("fastify-passport"));

var _fastifySecureSession = _interopRequireDefault(require("fastify-secure-session"));

var _pug = _interopRequireDefault(require("pug"));

var _pointOfView = _interopRequireDefault(require("point-of-view"));

var _i18next = _interopRequireDefault(require("i18next"));

var _ru = _interopRequireDefault(require("./locales/ru.js"));

var _index = _interopRequireDefault(require("./routes/index.js"));

var _index2 = _interopRequireDefault(require("./helpers/index.js"));

var _knexfile = _interopRequireDefault(require("../knexfile.js"));

var _index3 = _interopRequireDefault(require("./models/index.js"));

var _FormStrategy = _interopRequireDefault(require("./lib/passportStrategies/FormStrategy.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_dotenv.default.config();

const mode = process.env.NODE_ENV || 'development';
const isProduction = mode === 'production';
const isDevelopment = mode === 'development';

const registerViewsPlugin = app => {
  const domain = isDevelopment ? 'http://0.0.0.0:5000' : '';
  const helpers = (0, _index2.default)(app);
  app.register(_pointOfView.default, {
    engine: {
      pug: _pug.default
    },
    includeViewExtension: true,
    templates: _path.default.join(__dirname, '..', 'server', 'views'),
    defaultContext: { ...helpers,

      assetPath(filename) {
        return `${domain}/assets/${filename}`;
      }

    }
  }); // необходимо именно добавлять декоратор,а не свойство, иначе не заработает flash в пуге

  app.decorateReply('render', function render(viewPath, locals) {
    this.view(viewPath, { ...locals,
      reply: this
    });
  });
};

const registerStaticPlugin = app => {
  const pathPublic = isProduction ? _path.default.join(__dirname, '..', 'public') : _path.default.join(__dirname, '..', 'dist', 'public');
  app.register(_fastifyStatic.default, {
    root: pathPublic,
    prefix: '/assets/',
    list: true
  });
};

const setupLocalization = () => {
  _i18next.default.init({
    lng: 'ru',
    fallbackLng: 'en',
    // debug: isDevelopment,
    resources: {
      ru: _ru.default
    }
  });
};

const addHooks = app => {
  // this is for point of view. isAuthenticated() is now available in pug
  app.addHook('preHandler', async (req, reply) => {
    reply.locals = {
      isAuthenticated: () => req.isAuthenticated()
    };
  });
};

const registerMainPlugins = app => {
  app.register(_fastifySensible.default);
  app.register(_fastifyErrorPage.default);
  app.register(_fastifyReverseRoutes.plugin); // app.register(fastifyFormBody);
  // парсер ниже нужен для вложенных объектов

  app.register(_fastifyFormbody.default, {
    parser: _qs.default.parse
  });
  app.register(_fastifySecureSession.default, {
    secret: process.env.SESSION_KEY,
    cookie: {
      path: '/'
    }
  });

  _fastifyPassport.default.registerUserDeserializer(user => app.objection.models.user.query().findById(user.id));

  _fastifyPassport.default.registerUserSerializer(user => Promise.resolve(user));

  _fastifyPassport.default.use(new _FormStrategy.default('form', app));

  app.register(_fastifyPassport.default.initialize());
  app.register(_fastifyPassport.default.secureSession()); // this one is for 'app.fp' ad then method authenticate() from strategy:

  app.decorate('fp', _fastifyPassport.default); // this one is for { preValidation: app.authenticate }:

  app.decorate('authenticate', (...args) => _fastifyPassport.default.authenticate('form', {
    failureRedirect: app.reverse('root'),
    failureFlash: _i18next.default.t('flash.authError')
  })(...args));
  app.register(_fastifyMethodOverride.default);
  app.register(_fastifyObjectionjs.default, {
    knexConfig: _knexfile.default[mode],
    models: _index3.default
  });
};

var _default = () => {
  const app = (0, _fastify.default)({
    // logger: {
    //   prettyPrint: isDevelopment,
    // },
    logger: true
  });
  registerMainPlugins(app);
  setupLocalization();
  registerViewsPlugin(app);
  registerStaticPlugin(app);
  (0, _index.default)(app);
  addHooks(app);
  return app;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9pbmRleC5qcyJdLCJuYW1lcyI6WyJkb3RlbnYiLCJjb25maWciLCJtb2RlIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiaXNQcm9kdWN0aW9uIiwiaXNEZXZlbG9wbWVudCIsInJlZ2lzdGVyVmlld3NQbHVnaW4iLCJhcHAiLCJkb21haW4iLCJoZWxwZXJzIiwicmVnaXN0ZXIiLCJwb2ludE9mVmlldyIsImVuZ2luZSIsInB1ZyIsIlB1ZyIsImluY2x1ZGVWaWV3RXh0ZW5zaW9uIiwidGVtcGxhdGVzIiwicGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJkZWZhdWx0Q29udGV4dCIsImFzc2V0UGF0aCIsImZpbGVuYW1lIiwiZGVjb3JhdGVSZXBseSIsInJlbmRlciIsInZpZXdQYXRoIiwibG9jYWxzIiwidmlldyIsInJlcGx5IiwicmVnaXN0ZXJTdGF0aWNQbHVnaW4iLCJwYXRoUHVibGljIiwiZmFzdGlmeVN0YXRpYyIsInJvb3QiLCJwcmVmaXgiLCJsaXN0Iiwic2V0dXBMb2NhbGl6YXRpb24iLCJpMThuZXh0IiwiaW5pdCIsImxuZyIsImZhbGxiYWNrTG5nIiwicmVzb3VyY2VzIiwicnUiLCJhZGRIb29rcyIsImFkZEhvb2siLCJyZXEiLCJpc0F1dGhlbnRpY2F0ZWQiLCJyZWdpc3Rlck1haW5QbHVnaW5zIiwiZmFzdGlmeVNlbnNpYmxlIiwiZmFzdGlmeUVycm9yUGFnZSIsImZhc3RpZnlSZXZlcnNlUm91dGVzIiwiZmFzdGlmeUZvcm1Cb2R5IiwicGFyc2VyIiwicXMiLCJwYXJzZSIsImZhc3RpZnlTZWN1cmVTZXNzaW9uIiwic2VjcmV0IiwiU0VTU0lPTl9LRVkiLCJjb29raWUiLCJmYXN0aWZ5UGFzc3BvcnQiLCJyZWdpc3RlclVzZXJEZXNlcmlhbGl6ZXIiLCJ1c2VyIiwib2JqZWN0aW9uIiwibW9kZWxzIiwicXVlcnkiLCJmaW5kQnlJZCIsImlkIiwicmVnaXN0ZXJVc2VyU2VyaWFsaXplciIsIlByb21pc2UiLCJyZXNvbHZlIiwidXNlIiwiRm9ybVN0cmF0ZWd5IiwiaW5pdGlhbGl6ZSIsInNlY3VyZVNlc3Npb24iLCJkZWNvcmF0ZSIsImFyZ3MiLCJhdXRoZW50aWNhdGUiLCJmYWlsdXJlUmVkaXJlY3QiLCJyZXZlcnNlIiwiZmFpbHVyZUZsYXNoIiwidCIsImZhc3RpZnlNZXRob2RPdmVycmlkZSIsImZhc3RpZnlPYmplY3Rpb25KUyIsImtuZXhDb25maWciLCJsb2dnZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBQSxnQkFBT0MsTUFBUDs7QUFDQSxNQUFNQyxJQUFJLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLElBQXdCLGFBQXJDO0FBQ0EsTUFBTUMsWUFBWSxHQUFHSixJQUFJLEtBQUssWUFBOUI7QUFDQSxNQUFNSyxhQUFhLEdBQUdMLElBQUksS0FBSyxhQUEvQjs7QUFFQSxNQUFNTSxtQkFBbUIsR0FBSUMsR0FBRCxJQUFTO0FBQ25DLFFBQU1DLE1BQU0sR0FBR0gsYUFBYSxHQUFHLHFCQUFILEdBQTJCLEVBQXZEO0FBQ0EsUUFBTUksT0FBTyxHQUFHLHFCQUFXRixHQUFYLENBQWhCO0FBRUFBLEVBQUFBLEdBQUcsQ0FBQ0csUUFBSixDQUFhQyxvQkFBYixFQUEwQjtBQUN4QkMsSUFBQUEsTUFBTSxFQUFFO0FBQ05DLE1BQUFBLEdBQUcsRUFBRUM7QUFEQyxLQURnQjtBQUl4QkMsSUFBQUEsb0JBQW9CLEVBQUUsSUFKRTtBQUt4QkMsSUFBQUEsU0FBUyxFQUFFQyxjQUFLQyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsSUFBckIsRUFBMkIsUUFBM0IsRUFBcUMsT0FBckMsQ0FMYTtBQU14QkMsSUFBQUEsY0FBYyxFQUFFLEVBQ2QsR0FBR1gsT0FEVzs7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c0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XG5cbmltcG9ydCBmYXN0aWZ5IGZyb20gJ2Zhc3RpZnknO1xuaW1wb3J0IGZhc3RpZnlTdGF0aWMgZnJvbSAnZmFzdGlmeS1zdGF0aWMnO1xuaW1wb3J0IGZhc3RpZnlFcnJvclBhZ2UgZnJvbSAnZmFzdGlmeS1lcnJvci1wYWdlJztcbmltcG9ydCBmYXN0aWZ5U2Vuc2libGUgZnJvbSAnZmFzdGlmeS1zZW5zaWJsZSc7XG5pbXBvcnQgZmFzdGlmeUZvcm1Cb2R5IGZyb20gJ2Zhc3RpZnktZm9ybWJvZHknO1xuaW1wb3J0IHFzIGZyb20gJ3FzJztcbmltcG9ydCB7IHBsdWdpbiBhcyBmYXN0aWZ5UmV2ZXJzZVJvdXRlcyB9IGZyb20gJ2Zhc3RpZnktcmV2ZXJzZS1yb3V0ZXMnO1xuaW1wb3J0IGZhc3RpZnlNZXRob2RPdmVycmlkZSBmcm9tICdmYXN0aWZ5LW1ldGhvZC1vdmVycmlkZSc7XG5pbXBvcnQgZmFzdGlmeU9iamVjdGlvbkpTIGZyb20gJ2Zhc3RpZnktb2JqZWN0aW9uanMnO1xuaW1wb3J0IGZhc3RpZnlQYXNzcG9ydCBmcm9tICdmYXN0aWZ5LXBhc3Nwb3J0JztcbmltcG9ydCBmYXN0aWZ5U2VjdXJlU2Vzc2lvbiBmcm9tICdmYXN0aWZ5LXNlY3VyZS1zZXNzaW9uJztcblxuaW1wb3J0IFB1ZyBmcm9tICdwdWcnO1xuaW1wb3J0IHBvaW50T2ZWaWV3IGZyb20gJ3BvaW50LW9mLXZpZXcnO1xuaW1wb3J0IGkxOG5leHQgZnJvbSAnaTE4bmV4dCc7XG5pbXBvcnQgcnUgZnJvbSAnLi9sb2NhbGVzL3J1LmpzJztcblxuaW1wb3J0IGFkZFJvdXRlcyBmcm9tICcuL3JvdXRlcy9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0SGVscGVycyBmcm9tICcuL2hlbHBlcnMvaW5kZXguanMnO1xuaW1wb3J0IGtuZXhDb25maWcgZnJvbSAnLi4va25leGZpbGUuanMnO1xuaW1wb3J0IG1vZGVscyBmcm9tICcuL21vZGVscy9pbmRleC5qcyc7XG5pbXBvcnQgRm9ybVN0cmF0ZWd5IGZyb20gJy4vbGliL3Bhc3Nwb3J0U3RyYXRlZ2llcy9Gb3JtU3RyYXRlZ3kuanMnO1xuXG5kb3RlbnYuY29uZmlnKCk7XG5jb25zdCBtb2RlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50JztcbmNvbnN0IGlzUHJvZHVjdGlvbiA9IG1vZGUgPT09ICdwcm9kdWN0aW9uJztcbmNvbnN0IGlzRGV2ZWxvcG1lbnQgPSBtb2RlID09PSAnZGV2ZWxvcG1lbnQnO1xuXG5jb25zdCByZWdpc3RlclZpZXdzUGx1Z2luID0gKGFwcCkgPT4ge1xuICBjb25zdCBkb21haW4gPSBpc0RldmVsb3BtZW50ID8gJ2h0dHA6Ly8wLjAuMC4wOjUwMDAnIDogJyc7XG4gIGNvbnN0IGhlbHBlcnMgPSBnZXRIZWxwZXJzKGFwcCk7XG5cbiAgYXBwLnJlZ2lzdGVyKHBvaW50T2ZWaWV3LCB7XG4gICAgZW5naW5lOiB7XG4gICAgICBwdWc6IFB1ZyxcbiAgICB9LFxuICAgIGluY2x1ZGVWaWV3RXh0ZW5zaW9uOiB0cnVlLFxuICAgIHRlbXBsYXRlczogcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ3NlcnZlcicsICd2aWV3cycpLFxuICAgIGRlZmF1bHRDb250ZXh0OiB7XG4gICAgICAuLi5oZWxwZXJzLFxuICAgICAgYXNzZXRQYXRoKGZpbGVuYW1lKSB7XG4gICAgICAgIHJldHVybiBgJHtkb21haW59L2Fzc2V0cy8ke2ZpbGVuYW1lfWA7XG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vINC90LXQvtCx0YXQvtC00LjQvNC+INC40LzQtdC90L3QviDQtNC+0LHQsNCy0LvRj9GC0Ywg0LTQtdC60L7RgNCw0YLQvtGALNCwINC90LUg0YHQstC+0LnRgdGC0LLQviwg0LjQvdCw0YfQtSDQvdC1INC30LDRgNCw0LHQvtGC0LDQtdGCIGZsYXNoINCyINC/0YPQs9C1XG4gIGFwcC5kZWNvcmF0ZVJlcGx5KCdyZW5kZXInLCBmdW5jdGlvbiByZW5kZXIodmlld1BhdGgsIGxvY2Fscykge1xuICAgIHRoaXMudmlldyh2aWV3UGF0aCwgeyAuLi5sb2NhbHMsIHJlcGx5OiB0aGlzIH0pO1xuICB9KTtcbn07XG5cbmNvbnN0IHJlZ2lzdGVyU3RhdGljUGx1Z2luID0gKGFwcCkgPT4ge1xuICBjb25zdCBwYXRoUHVibGljID0gaXNQcm9kdWN0aW9uXG4gICAgPyBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAncHVibGljJylcbiAgICA6IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICdkaXN0JywgJ3B1YmxpYycpO1xuXG4gIGFwcC5yZWdpc3RlcihmYXN0aWZ5U3RhdGljLCB7XG4gICAgcm9vdDogcGF0aFB1YmxpYyxcbiAgICBwcmVmaXg6ICcvYXNzZXRzLycsXG4gICAgbGlzdDogdHJ1ZSxcbiAgfSk7XG59O1xuXG5jb25zdCBzZXR1cExvY2FsaXphdGlvbiA9ICgpID0+IHtcbiAgaTE4bmV4dFxuICAgIC5pbml0KHtcbiAgICAgIGxuZzogJ3J1JyxcbiAgICAgIGZhbGxiYWNrTG5nOiAnZW4nLFxuICAgICAgLy8gZGVidWc6IGlzRGV2ZWxvcG1lbnQsXG4gICAgICByZXNvdXJjZXM6IHtcbiAgICAgICAgcnUsXG4gICAgICB9LFxuICAgIH0pO1xufTtcblxuY29uc3QgYWRkSG9va3MgPSAoYXBwKSA9PiB7XG4gIC8vIHRoaXMgaXMgZm9yIHBvaW50IG9mIHZpZXcuIGlzQXV0aGVudGljYXRlZCgpIGlzIG5vdyBhdmFpbGFibGUgaW4gcHVnXG4gIGFwcC5hZGRIb29rKCdwcmVIYW5kbGVyJywgYXN5bmMgKHJlcSwgcmVwbHkpID0+IHtcbiAgICByZXBseS5sb2NhbHMgPSB7XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6ICgpID0+IHJlcS5pc0F1dGhlbnRpY2F0ZWQoKSxcbiAgICB9O1xuICB9KTtcbn07XG5cbmNvbnN0IHJlZ2lzdGVyTWFpblBsdWdpbnMgPSAoYXBwKSA9PiB7XG4gIGFwcC5yZWdpc3RlcihmYXN0aWZ5U2Vuc2libGUpO1xuICBhcHAucmVnaXN0ZXIoZmFzdGlmeUVycm9yUGFnZSk7XG4gIGFwcC5yZWdpc3RlcihmYXN0aWZ5UmV2ZXJzZVJvdXRlcyk7XG4gIC8vIGFwcC5yZWdpc3RlcihmYXN0aWZ5Rm9ybUJvZHkpO1xuICAvLyDQv9Cw0YDRgdC10YAg0L3QuNC20LUg0L3Rg9C20LXQvSDQtNC70Y8g0LLQu9C+0LbQtdC90L3Ri9GFINC+0LHRitC10LrRgtC+0LJcbiAgYXBwLnJlZ2lzdGVyKGZhc3RpZnlGb3JtQm9keSwgeyBwYXJzZXI6IHFzLnBhcnNlIH0pO1xuXG4gIGFwcC5yZWdpc3RlcihmYXN0aWZ5U2VjdXJlU2Vzc2lvbiwge1xuICAgIHNlY3JldDogcHJvY2Vzcy5lbnYuU0VTU0lPTl9LRVksXG4gICAgY29va2llOiB7XG4gICAgICBwYXRoOiAnLycsXG4gICAgfSxcbiAgfSk7XG5cbiAgZmFzdGlmeVBhc3Nwb3J0LnJlZ2lzdGVyVXNlckRlc2VyaWFsaXplcihcbiAgICAodXNlcikgPT4gYXBwLm9iamVjdGlvbi5tb2RlbHMudXNlci5xdWVyeSgpLmZpbmRCeUlkKHVzZXIuaWQpLFxuICApO1xuICBmYXN0aWZ5UGFzc3BvcnQucmVnaXN0ZXJVc2VyU2VyaWFsaXplcigodXNlcikgPT4gUHJvbWlzZS5yZXNvbHZlKHVzZXIpKTtcbiAgZmFzdGlmeVBhc3Nwb3J0LnVzZShuZXcgRm9ybVN0cmF0ZWd5KCdmb3JtJywgYXBwKSk7XG4gIGFwcC5yZWdpc3RlcihmYXN0aWZ5UGFzc3BvcnQuaW5pdGlhbGl6ZSgpKTtcbiAgYXBwLnJlZ2lzdGVyKGZhc3RpZnlQYXNzcG9ydC5zZWN1cmVTZXNzaW9uKCkpO1xuICAvLyB0aGlzIG9uZSBpcyBmb3IgJ2FwcC5mcCcgYWQgdGhlbiBtZXRob2QgYXV0aGVudGljYXRlKCkgZnJvbSBzdHJhdGVneTpcbiAgYXBwLmRlY29yYXRlKCdmcCcsIGZhc3RpZnlQYXNzcG9ydCk7XG4gIC8vIHRoaXMgb25lIGlzIGZvciB7IHByZVZhbGlkYXRpb246IGFwcC5hdXRoZW50aWNhdGUgfTpcbiAgYXBwLmRlY29yYXRlKCdhdXRoZW50aWNhdGUnLCAoLi4uYXJncykgPT4gZmFzdGlmeVBhc3Nwb3J0LmF1dGhlbnRpY2F0ZShcbiAgICAnZm9ybScsXG4gICAge1xuICAgICAgZmFpbHVyZVJlZGlyZWN0OiBhcHAucmV2ZXJzZSgncm9vdCcpLFxuICAgICAgZmFpbHVyZUZsYXNoOiBpMThuZXh0LnQoJ2ZsYXNoLmF1dGhFcnJvcicpLFxuICAgIH0sXG4gICkoLi4uYXJncykpO1xuXG4gIGFwcC5yZWdpc3RlcihmYXN0aWZ5TWV0aG9kT3ZlcnJpZGUpO1xuICBhcHAucmVnaXN0ZXIoZmFzdGlmeU9iamVjdGlvbkpTLCB7XG4gICAga25leENvbmZpZzoga25leENvbmZpZ1ttb2RlXSxcbiAgICBtb2RlbHMsXG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICBjb25zdCBhcHAgPSBmYXN0aWZ5KHtcbiAgICAvLyBsb2dnZXI6IHtcbiAgICAvLyAgIHByZXR0eVByaW50OiBpc0RldmVsb3BtZW50LFxuICAgIC8vIH0sXG4gICAgbG9nZ2VyOiB0cnVlLFxuICB9KTtcblxuICByZWdpc3Rlck1haW5QbHVnaW5zKGFwcCk7XG5cbiAgc2V0dXBMb2NhbGl6YXRpb24oKTtcbiAgcmVnaXN0ZXJWaWV3c1BsdWdpbihhcHApO1xuICByZWdpc3RlclN0YXRpY1BsdWdpbihhcHApO1xuXG4gIGFkZFJvdXRlcyhhcHApO1xuICBhZGRIb29rcyhhcHApO1xuXG4gIHJldHVybiBhcHA7XG59O1xuIl19